--- # LNP API definition file; autogenerated from c-lightning CSV API file

types:
  - &node_id { snake: node_id, pascal: NodeId, camel: nodeId }
  - &wirestring { snake: wirestring, pascal: Wirestring, camel: wirestring }
  - &u16 { snake: u16, pascal: U16, camel: u16 }
  - &u8 { snake: u8, pascal: U8, camel: u8 }
  - &bip32_key_version { snake: bip32_key_version, pascal: Bip32KeyVersion, camel: bip32KeyVersion }
  - &chainparams { snake: chainparams, pascal: Chainparams, camel: chainparams }
  - &secret { snake: secret, pascal: Secret, camel: secret }
  - &privkey { snake: privkey, pascal: Privkey, camel: privkey }
  - &secrets { snake: secrets, pascal: Secrets, camel: secrets }
  - &sha256 { snake: sha256, pascal: Sha256, camel: sha256 }
  - &ext_key { snake: ext_key, pascal: ExtKey, camel: extKey }
  - &u64 { snake: u64, pascal: U64, camel: u64 }
  - &basepoints { snake: basepoints, pascal: Basepoints, camel: basepoints }
  - &pubkey { snake: pubkey, pascal: Pubkey, camel: pubkey }
  - &amount_sat { snake: amount_sat, pascal: AmountSat, camel: amountSat }
  - &u32 { snake: u32, pascal: U32, camel: u32 }
  - &utxo { snake: utxo, pascal: Utxo, camel: utxo }
  - &bitcoin_tx { snake: bitcoin_tx, pascal: BitcoinTx, camel: bitcoinTx }
  - &secp256k1_ecdsa_signature { snake: secp256k1_ecdsa_signature, pascal: Secp256k1EcdsaSignature, camel: secp256k1EcdsaSignature }
  - &bitcoin_tx_output { snake: bitcoin_tx_output, pascal: BitcoinTxOutput, camel: bitcoinTxOutput }
  - &secp256k1_ecdsa_recoverable_signature { snake: secp256k1_ecdsa_recoverable_signature, pascal: Secp256k1EcdsaRecoverableSignature, camel: secp256k1EcdsaRecoverableSignature }
  - &bitcoin_signature { snake: bitcoin_signature, pascal: BitcoinSignature, camel: bitcoinSignature }
  - &witscript { snake: witscript, pascal: Witscript, camel: witscript }
  - &bool { snake: bool, pascal: Bool, camel: bool }

messages:
  1000: &hsmstatus_client_bad_request
    - { name: id, type: *node_id }
    - { name: description, type: *wirestring }
    - { name: len, type: *u16 }
    - { name: msg, type: *u8, len_var: len }
  11: &hsm_init
    - { name: bip32_key_version, type: *bip32_key_version }
    - { name: chainparams, type: *chainparams }
    - { name: hsm_encryption_key, type: *secret, optional: true }
    - { name: dev_force_privkey, type: *privkey, optional: true }
    - { name: dev_force_bip32_seed, type: *secret, optional: true }
    - { name: dev_force_channel_secrets, type: *secrets, optional: true }
    - { name: dev_force_channel_secrets_shaseed, type: *sha256, optional: true }
  111: &hsm_init_reply
    - { name: node_id, type: *node_id }
    - { name: bip32, type: *ext_key }
  9: &hsm_client_hsmfd
    - { name: id, type: *node_id }
    - { name: dbid, type: *u64 }
    - { name: capabilities, type: *u64 }
  109: &hsm_client_hsmfd_reply
  10: &hsm_get_channel_basepoints
    - { name: peerid, type: *node_id }
    - { name: dbid, type: *u64 }
  110: &hsm_get_channel_basepoints_reply
    - { name: basepoints, type: *basepoints }
    - { name: funding_pubkey, type: *pubkey }
  4: &hsm_sign_funding
    - { name: satoshi_out, type: *amount_sat }
    - { name: change_out, type: *amount_sat }
    - { name: change_keyindex, type: *u32 }
    - { name: our_pubkey, type: *pubkey }
    - { name: their_pubkey, type: *pubkey }
    - { name: num_inputs, type: *u16 }
    - { name: inputs, type: *utxo, len_var: num_inputs }
  104: &hsm_sign_funding_reply
    - { name: tx, type: *bitcoin_tx }
  6: &hsm_node_announcement_sig_req
    - { name: annlen, type: *u16 }
    - { name: announcement, type: *u8, len_var: annlen }
  106: &hsm_node_announcement_sig_reply
    - { name: signature, type: *secp256k1_ecdsa_signature }
  7: &hsm_sign_withdrawal
    - { name: satoshi_out, type: *amount_sat }
    - { name: change_out, type: *amount_sat }
    - { name: change_keyindex, type: *u32 }
    - { name: num_outputs, type: *u16 }
    - { name: outputs, type: *bitcoin_tx_output, len_var: num_outputs }
    - { name: num_inputs, type: *u16 }
    - { name: inputs, type: *utxo, len_var: num_inputs }
    - { name: nlocktime, type: *u32 }
  107: &hsm_sign_withdrawal_reply
    - { name: tx, type: *bitcoin_tx }
  8: &hsm_sign_invoice
    - { name: len, type: *u16 }
    - { name: u5bytes, type: *u8, len_var: len }
    - { name: hrplen, type: *u16 }
    - { name: hrp, type: *u8, len_var: hrplen }
  108: &hsm_sign_invoice_reply
    - { name: sig, type: *secp256k1_ecdsa_recoverable_signature }
  1: &hsm_ecdh_req
    - { name: point, type: *pubkey }
  100: &hsm_ecdh_resp
    - { name: ss, type: *secret }
  2: &hsm_cannouncement_sig_req
    - { name: calen, type: *u16 }
    - { name: ca, type: *u8, len_var: calen }
  102: &hsm_cannouncement_sig_reply
    - { name: node_signature, type: *secp256k1_ecdsa_signature }
    - { name: bitcoin_signature, type: *secp256k1_ecdsa_signature }
  3: &hsm_cupdate_sig_req
    - { name: culen, type: *u16 }
    - { name: cu, type: *u8, len_var: culen }
  103: &hsm_cupdate_sig_reply
    - { name: culen, type: *u16 }
    - { name: cu, type: *u8, len_var: culen }
  5: &hsm_sign_commitment_tx
    - { name: peer_id, type: *node_id }
    - { name: channel_dbid, type: *u64 }
    - { name: tx, type: *bitcoin_tx }
    - { name: remote_funding_key, type: *pubkey }
    - { name: funding_amount, type: *amount_sat }
  105: &hsm_sign_commitment_tx_reply
    - { name: sig, type: *bitcoin_signature }
  12: &hsm_sign_delayed_payment_to_us
    - { name: commit_num, type: *u64 }
    - { name: tx, type: *bitcoin_tx }
    - { name: wscript_len, type: *u16 }
    - { name: wscript, type: *u8, len_var: wscript_len }
    - { name: input_amount, type: *amount_sat }
  13: &hsm_sign_remote_htlc_to_us
    - { name: remote_per_commitment_point, type: *pubkey }
    - { name: tx, type: *bitcoin_tx }
    - { name: wscript_len, type: *u16 }
    - { name: wscript, type: *u8, len_var: wscript_len }
    - { name: input_amount, type: *amount_sat }
  14: &hsm_sign_penalty_to_us
    - { name: revocation_secret, type: *secret }
    - { name: tx, type: *bitcoin_tx }
    - { name: wscript_len, type: *u16 }
    - { name: wscript, type: *u8, len_var: wscript_len }
    - { name: input_amount, type: *amount_sat }
  16: &hsm_sign_local_htlc_tx
    - { name: commit_num, type: *u64 }
    - { name: tx, type: *bitcoin_tx }
    - { name: wscript_len, type: *u16 }
    - { name: wscript, type: *u8, len_var: wscript_len }
    - { name: input_amount, type: *amount_sat }
  19: &hsm_sign_remote_commitment_tx
    - { name: tx, type: *bitcoin_tx }
    - { name: remote_funding_key, type: *pubkey }
    - { name: funding_amount, type: *amount_sat }
    - { name: num_witscripts, type: *u16 }
    - { name: output_witscripts, type: *witscript, len_var: num_witscripts }
    - { name: remote_per_commit, type: *pubkey }
    - { name: option_static_remotekey, type: *bool }
  20: &hsm_sign_remote_htlc_tx
    - { name: tx, type: *bitcoin_tx }
    - { name: len, type: *u16 }
    - { name: wscript, type: *u8, len_var: len }
    - { name: amounts_satoshi, type: *amount_sat }
    - { name: remote_per_commit_point, type: *pubkey }
  21: &hsm_sign_mutual_close_tx
    - { name: tx, type: *bitcoin_tx }
    - { name: remote_funding_key, type: *pubkey }
    - { name: funding, type: *amount_sat }
  112: &hsm_sign_tx_reply
    - { name: sig, type: *bitcoin_signature }
  18: &hsm_get_per_commitment_point
    - { name: n, type: *u64 }
  118: &hsm_get_per_commitment_point_reply
    - { name: per_commitment_point, type: *pubkey }
    - { name: old_commitment_secret, type: *secret, optional: true }
  33: &hsm_dev_memleak
  133: &hsm_dev_memleak_reply
    - { name: leak, type: *bool }
  22: &hsm_check_future_secret
    - { name: n, type: *u64 }
    - { name: commitment_secret, type: *secret }
  122: &hsm_check_future_secret_reply
    - { name: correct, type: *bool }
  23: &hsm_sign_message
    - { name: len, type: *u16 }
    - { name: msg, type: *u8, len_var: len }
  123: &hsm_sign_message_reply
    - { name: sig, type: *secp256k1_ecdsa_recoverable_signature }
...
